Accessing Local Variables of the Enclosing Scope, and Declaring and Accessing Members of the Anonymous Class:


Like local classes, anonymous classes can capture variables; they have the same access to local variables of the enclosing scope:
	
	An anonymous class has access to the members of its enclosing class.
	
	An anonymous class cannot access local variables in its enclosing scope that are not declared as final or effectively final.
	
	Like a nested class, a declaration of a type (such as a variable) in an anonymous class shadows any other declarations in the enclosing scope that have the same name. See Shadowing for more information.

Anonymous classes also have the same restrictions as local classes with respect to their members:

	You cannot declare static initializers or member interfaces in an anonymous class.
	
	An anonymous class can have static members provided that they are constant variables.

Note that: you can declare the following in anonymous classes:
	
	Fields
	
	Extra methods (even if they do not implement any methods of the supertype)
	
	Instance initializers
	
	Local classes

However, you cannot declare constructors in an anonymous class.